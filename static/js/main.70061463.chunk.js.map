{"version":3,"sources":["components/videoList/VideoList.js","components/input/Input.js","components/moreVideoButton/moreVideoButton.js","components/Youtube.js","App.js","serviceWorker.js","index.js"],"names":["VideoList","_ref","title","image","video","link","concat","react_default","a","createElement","Fragment","className","href","src","url","alt","Input","onKeyPress","onChange","onClick","value","type","placeholder","index_es","icon","faSearch","MoreVideoButton","BASE_PATH","SEARCH_PATH","KEY","Youtube","state","videos","searchQuery","result","maxResults","axiosData","_this","axios","get","params","part","key","q","then","setNews","data","items","catch","error","setState","handleInputChange","target","getSearch","_ref2","handleClickButton","getMoreVideos","this","_this$state","console","log","input_Input","map","item","videoList_VideoList","id","videoId","snippet","thumbnails","medium","moreVideoButton_moreVideoButton","Component","App","components_Youtube","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.70061463.chunk.js","sourcesContent":["import React from 'react';\nimport './videoList.css';\n\nfunction VideoList({ title, image, video }) {\n\n  const link = `https://www.youtube.com/watch?v=${video}`;\n\n  return (\n    <>\n      <li className=\"youtube-videos-list__item\">\n        <a className=\"youtube-videos-list__link\" href={link}>\n          <img src={image.url} className=\"youtube-videos-list__img\" alt=\"video\"/>\n        </a>\n        <p className=\"youtube-videos-list__text\">{title}</p>\n      </li>\n    </>\n  );\n}\n\nexport default VideoList;","import React from 'react';\nimport './input.css';\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport { faSearch } from '@fortawesome/free-solid-svg-icons'\n\nfunction Input({ onKeyPress, onChange, onClick, value }) {\n  return (\n    <div className=\"youtube-search\">\n      <input\n        type=\"text\"\n        className=\"youtube-search__input\"\n        placeholder=\"Search\"\n        onChange={onChange}\n        onKeyPress={onKeyPress}\n        value={value}\n      />\n      <button className=\"youtube-search__btn\" type=\"button\" onClick={onClick}>\n        <FontAwesomeIcon icon={faSearch} />\n      </button>\n    </div>\n  );\n}\n\nexport default Input;","import React from 'react';\nimport './moreVideoButton.css';\n\nfunction MoreVideoButton({ onClick }) {\n  return (\n    <>\n      <button className=\"youtube-moreVideos\" onClick={onClick}>Load more...</button>\n    </>\n  );\n}\n\nexport default MoreVideoButton;","import React, {Component} from 'react';\nimport axios from 'axios';\nimport VideoList from \"./videoList/VideoList\";\nimport Input from \"./input/Input\";\nimport MoreVideoButton from \"./moreVideoButton/moreVideoButton\";\n\nconst BASE_PATH = 'https://www.googleapis.com/youtube/v3';\nconst SEARCH_PATH = '/search';\nconst KEY ='AIzaSyDXQ1H2iW0GC1wlN5X_U55Lhv2VX3QSjc4';\n\nclass Youtube extends Component {\n\n  state = {\n    videos: null,\n    searchQuery: '',\n    result: [],\n    maxResults: 10,\n  };\n\n  componentDidMount() {\n    const { searchQuery } = this.state;\n    this.axiosData((searchQuery))\n  };\n\n  axiosData = (searchQuery) => {\n    const { maxResults } = this.state;\n\n    axios.get(`${BASE_PATH}${SEARCH_PATH}`, {\n      params: {\n        part: 'snippet',\n        key: KEY,\n        q: searchQuery,\n        type: 'video',\n        maxResults: maxResults,\n      }\n    }).then(result => this.setNews(result.data.items))\n      .catch(error => error)\n  };\n\n  setNews = result => {\n    this.setState({ result })\n  };\n\n  handleInputChange = ({ target: { value } }) => {\n    this.setState({\n      searchQuery: value,\n    })\n  };\n\n  getSearch = ({ key }) => {\n    if(key === 'Enter') {\n      const { searchQuery } = this.state;\n      this.axiosData(searchQuery)\n    }\n    this.setState({maxResults: 10})\n  };\n\n  handleClickButton = () => {\n    const { searchQuery } = this.state;\n    this.axiosData(searchQuery);\n    this.setState({maxResults: 10})\n  };\n\n  getMoreVideos = () => {\n    const { searchQuery } = this.state;\n    this.setState((state) =>\n      ({maxResults: state.maxResults + 10}),() => this.axiosData(searchQuery));\n  };\n\n  render() {\n\n    const { result, maxResults, searchQuery } = this.state;\n\n    console.log(result);\n\n    return (\n      <>\n        <Input\n          onKeyPress={this.getSearch}\n          onChange={this.handleInputChange}\n          value={searchQuery}\n          onClick={this.handleClickButton}/>\n          <div className=\"youtube-videos\">\n            <ul className=\"youtube-videos-list\">\n              {result.map(item =>\n                <VideoList\n                  key={item.id.videoId}\n                  title={item.snippet.title}\n                  image={item.snippet.thumbnails.medium}\n                  video={item.id.videoId}\n                />)}\n            </ul>\n          </div>\n        {maxResults >= 10\n          ?\n          <MoreVideoButton onClick={this.getMoreVideos} />\n          : null\n        }\n      </>\n    );\n  }\n}\n\nexport default Youtube;\n","import React from 'react';\nimport './App.css';\nimport Youtube from \"./components/Youtube\";\n\nfunction App() {\n  return (\n    <div className=\"youtube\">\n      <Youtube />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}